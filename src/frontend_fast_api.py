# -------------------------
# CONFIGURACI√ìN INICIAL Y LIBRER√çAS
# -------------------------

import os
import streamlit as st
from datetime import datetime
import pandas as pd
from api_client import llamar_api_prediccion, obtener_datos_grafico
import plotly.graph_objects as go
import plotly.express as px

# -------------------------
# CONFIGURACI√ìN DE LA INTERFAZ STREAMLIT
# -------------------------
st.set_page_config(layout="wide")

st.title('ü•ê Predicci√≥n semanal de ventas de boller√≠a')
st.header('by Jordi Quiroga')
st.markdown("---")

# Debug opcional: ver qu√© API_URL est√° leyendo la UI
with st.expander("üîß Informaci√≥n de configuraci√≥n"):
    st.caption(f"API_URL = {os.getenv('API_URL', '(sin definir; usando fallback)')}")
    st.caption(f"HTTP_PROXY={os.getenv('HTTP_PROXY')}  HTTPS_PROXY={os.getenv('HTTPS_PROXY')}  ALL_PROXY={os.getenv('ALL_PROXY')}")
    st.caption(f"http_proxy={os.getenv('http_proxy')}  https_proxy={os.getenv('https_proxy')}  all_proxy={os.getenv('all_proxy')}")

# -------------------------
# PREDICCI√ìN DESDE LA API
# -------------------------
st.subheader('üìä Obtener predicci√≥n')

if st.button('üöÄ Generar predicci√≥n', type='primary'):
    with st.spinner('Obteniendo predicci√≥n desde la API...'):
        try:
            timestamp = datetime.now()
            resultado_api = llamar_api_prediccion(timestamp)
            
            # Mostrar resultado principal
            st.success('‚úÖ Predicci√≥n obtenida exitosamente!')
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.metric(
                    label="üìÖ Semana de predicci√≥n", 
                    value=resultado_api['week_start'][0]
                )
            
            with col2:
                st.metric(
                    label="üí∞ Valor predicho", 
                    value=f"{resultado_api['prediction'][0]:.2f} ‚Ç¨"
                )
            
            # Mostrar DataFrame de resultado
            df_resultado = pd.DataFrame({
                'Semana': [resultado_api['week_start'][0]],
                'Predicci√≥n (‚Ç¨)': [f"{resultado_api['prediction'][0]:.2f}"]
            })
            
            st.subheader('üìã Detalle de la predicci√≥n')
            st.dataframe(df_resultado, use_container_width=True)
            
            # Debug opcional
            with st.expander("üîç Respuesta completa de la API (debug)"):
                st.json(resultado_api)
                
        except Exception as e:
            st.error(f"‚ùå Error al obtener la predicci√≥n: {str(e)}")
            st.info("üí° Verifica que la API est√© funcionando correctamente.")

# -------------------------
# GR√ÅFICO HIST√ìRICO Y PREDICCIONES
# -------------------------
st.markdown("---")
st.subheader('üìà Gr√°fico comparativo')

if st.button('üìä Mostrar gr√°fico hist√≥rico vs predicciones'):
    with st.spinner('Obteniendo datos hist√≥ricos desde la API...'):
        try:
            datos_grafico = obtener_datos_grafico()
            
            # Crear el gr√°fico con Plotly
            fig = go.Figure()
            
            # Datos hist√≥ricos (reales)
            if datos_grafico['historical']:
                df_hist = pd.DataFrame(datos_grafico['historical'])
                df_hist['week_start'] = pd.to_datetime(df_hist['week_start'])
                
                fig.add_trace(go.Scatter(
                    x=df_hist['week_start'],
                    y=df_hist['base_imponible'],
                    mode='lines+markers',
                    name='Valores Reales',
                    line=dict(color='blue', width=2),
                    marker=dict(size=4)
                ))
            
            # Predicciones hist√≥ricas
            if datos_grafico['predictions']:
                df_pred = pd.DataFrame(datos_grafico['predictions'])
                df_pred['week_start'] = pd.to_datetime(df_pred['week_start'])
                
                fig.add_trace(go.Scatter(
                    x=df_pred['week_start'],
                    y=df_pred['predicted_base_imponible'],
                    mode='lines+markers',
                    name='Predicciones',
                    line=dict(color='red', width=2, dash='dash'),
                    marker=dict(size=4, symbol='x')
                ))
            
            # Configurar el gr√°fico
            fig.update_layout(
                title='üìà Hist√≥rico de Ventas vs Predicciones',
                xaxis_title='Fecha (Semanas)',
                yaxis_title='Base Imponible (‚Ç¨)',
                hovermode='x unified',
                legend=dict(
                    orientation="h",
                    yanchor="bottom",
                    y=1.02,
                    xanchor="right",
                    x=1
                ),
                template='plotly_white'
            )
            
            # Mostrar el gr√°fico
            st.plotly_chart(fig, use_container_width=True)
            
            # Mostrar estad√≠sticas b√°sicas
            col1, col2 = st.columns(2)
            
            if datos_grafico['historical']:
                with col1:
                    st.metric(
                        "üìä Total semanas hist√≥ricas",
                        len(datos_grafico['historical'])
                    )
            
            if datos_grafico['predictions']:
                with col2:
                    st.metric(
                        "üîÆ Total predicciones",
                        len(datos_grafico['predictions'])
                    )
                    
        except Exception as e:
            st.error(f"‚ùå Error al obtener los datos del gr√°fico: {str(e)}")
            st.info("üí° Verifica que la API y Hopsworks est√©n funcionando correctamente.")

# -------------------------
# INFORMACI√ìN ADICIONAL
# -------------------------
st.markdown("---")
st.subheader('‚ÑπÔ∏è Informaci√≥n del modelo')

st.info("""
**üìà Modelo de predicci√≥n de ventas semanales**

Este sistema predice las ventas de productos de boller√≠a para la pr√≥xima semana utilizando:
- ü§ñ Algoritmos de Machine Learning (XGBoost)
- üìä Datos hist√≥ricos de ventas
- üîÑ Pipeline MLOps completo con Hopsworks
- ‚ö° API REST para predicciones en tiempo real

**üèóÔ∏è Arquitectura:**
- **Frontend (Streamlit):** Interfaz de usuario para visualizar predicciones
- **API (FastAPI):** L√≥gica de negocio y conexi√≥n con el modelo
- **Hopsworks:** Feature Store y Model Registry para MLOps

**üåê Despliegue:**
- API desplegada en Render
- Frontend disponible en Streamlit Cloud y Render
""")

st.markdown("---")
st.markdown("*Proyecto MLOps - M√°ster ML Engineer Nodd3r*")

